0.

안녕하십니까. 놈놈놈 팀의 발표를 맡게 된 이장한이라고 합니다. 반갑습니다.(넘기기)

저희 팀의 발표 주제는 '파이썬 라이브러리를 활용한 투자 전략 분석'입니다.

간단히 이야기해서 , 데이터분석, 머신러닝 알고리즘, 딥러닝을 이용한 투자 전략 분석이라고 보시면 됩니다.

저희는 특정 주식 투자 전략을 새우고 투자를 할 떄,머신러닝과 딥러닝 등을 통해 그것이 잘 맞아 떨어지는지와

그 전략을 잘 예측할 수 있는지 등에 대해 알아보고자 합니다.(넘기기)

들어 가기 앞서, 참고한 책을 소개하도록 하겠습니다. 

이 책은 데이터 분석, 인공지능, 딥러닝 등을 주식 투자 전략과 접목시킨 매우 좋은 책입니다.

금융 데이터 분석, 인공지능 등을 공부하고 싶으신 분들을 참고 바랍니다. (넘기기)

그리고, 코드가 너무 많아서, 중요한 부분만 찝어서 발표를 한다는 점 양해 바랍니다.

자, 그럼 본격적으로 들어가보도록 하죠.(넘기기)


1.자, 보시다시피 그리 똑똑해 보이지는 않는 어느 미국인이 있습니다.(넘기기)

튀어나온 배를 보다시피 맛있는 음식을 많이 먹고 싶어하죠. 그래서 돈을 필요로 합니다.(넘기기)

그런데, 돈을 벌고자 하는 의지도, 머리도,생각도 없습니다. 

그저 편하기 돈을 벌고자 하죠.(넘기기)

하지만, 그에게도 가지고 있는 것이 2가지가 있습니다. 

하나는 주식 시장에 투자할 종잣돈과,

다른 하나는 미국 시장에 대한 믿음입니다.

꾸준히 우상향할 것이라는 믿음이죠.(넘기기)

그렇다면, 이 미국인이 과연 주식시장에서 성공을 거둘 수 있을까요?

통념상으로는 불가능합니다. 뇌동매매만 하다가 쪽박을 차겠죠.

그러고는 이렇게 시장을 탓하기만 할 것입니다.(사기치지마 이 닭대가리야 짤)(넘기기)

하지만, 쉽고 효과적인 투자 전략만 잘 짠다면 성공할 수도 있지 않을까요? 이 할아버지 처럼요.(넘기기)

그래서 2가지 전략을 새웠습니다. 

하나는 절대 모멘텀 전략이구요, 하나는 마법 공식입니다. 

지금부터 이 2가지 전략이 뇌가 순수한 미국인을 주식 투자 성공의 길로 인도하게 될지.

알아보도록 하죠.(넘기기)

2.절대 모멘텀 전략, 마법 공식 둘 다 퀀트 투자 전략에 속합니다.

퀀트 투자란 “Quantitative Investment”의 약자로, 양적인 데이터와 통계학적 모델을 사용하여 투자 결정을 하는 방식을 의미합니다. 이는 주식, 채권, 파생상품 등 다양한 금융 상품에 적용될 수 있으며, 주요 목표는 이익을 극대화하고 위험을 최소화하는 것입니다.(넘기기)


먼저 절대 모멘텀 전략을 보죠. 간단히 설명하겠습니다.

절대 모멘텀 전략은 최근 N개월간 수익률이 양수이면 매수하고 음수이면 매도하는 방식으로 

상승 추세가 강한 종목에 투자하는 방식입니다.

코드를 보시죠.먼저 주식 데이터를 불러옵니다.(넘기기) 

그런 다음 월별 인덱스를 순회하며 1년 전 종가 대비 1개월전 종가 수익률을 계산해서 수익률이 양수이면 매수를 합니다. 그런 다음 매수/매도 시그널을 명시합니다.(넘기기)

이를 데이터 분석해 보았습니다. (넘기기)

참고로, 데이터는 야후 파이낸스의 S&P 500데이터를 직접 가져 왔습니다. 데이터 크기는 30년 동안의 주식 지표입니다.(넘기기)

그래프를 보시다시피, 30년동안 절대 모멘텀 투자를 한 결과 수익률은 무려 16배인 것을 알 수 있습니다.

하지만, 5년만 했다면 수익률은 30프로, 10년을 했다면 230프로가 나왔습니다.

10년이 아니라 최소 20년 30년동안 끈기 있게 투자를 해야 하는 거죠.(넘기기)

하지만, 변동성이 큰 주식시장에서 이렇게 간단한 방법으로 수익을 낼 수 있다는 것이 매우 유의미한 것 같습니다. 버티기만 하면 되는 거니까요. 이 할아버지처럼요. (넘기기)

3.그렇다면 이 절대 모멘텀 전략의 정확성을 어떻게 증명할 수 있을까요?

저희는 k-최근접 이웃 알고리즘(KNN)을 통해 절대 모멘텀에 관한 예측을 하는 모델을 설계하고, 정확도를 높히는 과정을 거쳤습니다.(넘기기)

 KNN은 매우 직관적이고 간단한 알고리즘이며 비교적 일관적인 결과를 도출하기에 현업에서도 많이 쓰입니다.(넘기기)

그림에서 보시듯이, 

여기서 가장 중요한 것을 K의 값을 어떻게 설정해야 정확도가 가장 높은지를 찾는 것입니다. (넘기기)

이를 활용하기 위해 yfinance,pandas-datareader,sklearn(사이킷런) 등을 활용했습니다.(넘기기)



4.자, 과정 코드입니다. 데이터를 불러오고(2.2의 코드),데이터를 1달 단위로 바꾸는 데이터 라벨링을 시행하고,그런 다음 데이터를 분리하고 모델을 학습합니다.(넘기기)

자, 그런 다음 결과를 그래프로 만들었습니다. 여기서 중요한 것은 TEST SET이 가장 높은 것입니다.(넘기기)

그래서 코드를 보시다시피, n_neighbors=13인 것을 지정해서 결과를 산출해 냈습니다.(2.2의 ln13부분)

그래서 테스트 정확도는 57프로가 나왔습니다.(넘기기)

5.최적화 방법

그런데, 약 57프로라는 정확도는 뭔가 탐탁치 않습니다. 통상적인 KNN의 정확도가 50프로 후반대라고 하니 만족할 만 하긴 하지만, 더 좋은 모델을 위해서는 정확도를 더 높여야 할 것입니다.(넘기기)

정확도를 높이기 위해서는 test_set 데이터의 비율을 높이거나, 인접 데이터 개수의 범위(K)를 조절하거나 해야 할 것입니다.


그러기 위해 저희는 위의 코드들을 하나의 함수로 합치고, (2.3의 함수 코드 캡쳐)

함수의 변수들을 바꿔가며 모델 최적화를 진행했습니다.

test_Set의 데이터 비율, k의 값, 데이터의 양(몇 년간의 주식 데이터를 가져올 것인가)을 조절했습니다.(넘기기)

먼저 test_Set의 데이터 비율에 따른 정확도 변화 그래프입니다.이를 통해 train_set을 0.75 정도로 정하는 것이 knn 모델 성능을 최적화할 수 있다는 것을 알 수 있습니다.(넘기기)

다음은 k(인접 자료)의 값을 바꿔보았습니다. 결과는 다음과 같습니다.(넘기기)

최대 test set 정확도를 가진 k값은 78이며, 최대 정확도는 73%였다. k의 범위가 5까지였을 때, 최대 정확도가 약 55%였다는 것을 보면, - k의 값을 어느 정도 늘리면, k의 값과 최대 정확도는 정비례한다는 사실을 알 수 있습니다.
하지만, k가 78을 넘어가는 시점에서 최대 정확도는 유의미하게 높아지지 않았으며, 어느 시점부터는 같은 최대 정확도값을 보였습니다.
이는 적정한 k값의 범위를 넘어가면 더 이상 k의 값을 늘리는 것이 의미가 많지 않다는 것을 보여줍니다.(넘기기)

다음은 데이터 기간을 바꿨습니다. 결과 그래프는 다음과 같습니다.

이를 통해 데이터의 기간, 즉 크기가 커질수록 test set의 최대 정확도는 올라간다(정비례한다.)는 것을 알 수 있습니다.(넘기기)

6.최종 결과

split_ratio는 너무 높게 설정하지도 않고, 너무 낮게 설정하지도 않는 것이 좋다. 약 0.75 정도가 좋습니다.

k의 개수는 일정 수준까지 올리면 높일수록 정확도가 정비례하지만, 너무 높이면 최대 정확도가 개선되지 않습니다. 어느 정도까지 k의 값을 올리되, 정확도의 최고점을 찾으면, 굳이 k의 값을 늘릴 필요가 없습니다.

데이터의 양은 많으면 많을 수록 좋을 것 같습니다..(넘기기)

7.인사이트

보통 주가 분석 관련 knn의 정확도는 50프로 중후반대를 보이나, 적절한 split_ratio 값, k의 개수, 데이터의 양을 알아내면 정확도를 73% 정도까지 끌어 올릴 수 있다는 사실을 알 수 있습니다. 이는 우리가 관련 변수 및 데이터를 어떻게 다루느냐에 따라 모델의 정확도가 달라질 수 있음을 알 수 있습니다.

knn을 절대 모멘텀 예측에 100프로 적용하는 것은 무리가 있을 수 있습니다. 최대 정확도가 70%초중반대이기 때문입니다. 하지만, 보통 주가 예측 관련 knn의 정확도가 50프로대 중후반인 것을 감안할 때, 참고할 수 있는 지표정도는 될 수 있을 것입니다.(넘기기)

8.개선 방안

개선 방안은, 솔직히 시간이 해결해 줄 것 같습니다.

주식 데이터는 시간이 갈 수록 쌓이는 것이기 때문에,

주식 데이터의 양이 많아지면 이 모델의 정확도도 높아질 것 같습니다.

그래서 시간을 가지고 데이터의 양을 늘리는 것이 가장 좋은 방법인 것 같습니다.(넘기기)

9.자, 지금까지 첫번째 전략인 절대 모멘텀 전략과 이에 관한 분석 모델인 knn을 보았습니다.

그런데, 첫번째 모델만으로는 이 탐욕스러운 미국인을 막을 수 없습니다. 

그래서 두번째 전략을 준비해 보았습니다.(넘기기)

10.두번째 전략은 마법 공식입니다.

투자에 사용할 자금과 투자 대상 기업 규모를 설정하고,

마법공식에 따른 순위를 나열합니다.

예를 들어, 코스피 200에서 자본 수익률이 높은 기업에 대한 순위를 매기고, 
      동시에 이익 수익률이 높은 기업을 순서대로 나열합니다.

그러고 나서, 자본 수익률 순위와 이익 수익률 순위를 더합니다.

예를 들면, 자본 수익률(ROA) 순위 1위와 이익 수익률(PER) 순위 4위의 총합은 5입니다.(넘기기)

더한 값의 등수가 낮은 순으로 순위를 매깁니다.

이 과정에서, ROA는 높고, PER는 낮은 저렴하지만 우량한 종목을 선별합니다. 이를 이해하기 위해서는 주식 관련 도메인 지식을 자세히 설명해야 하지만, 시간상 생략하겠습니다.

등수가 가장 낮은 기업들을 매수 한 뒤,

처음 투자 기간 1년 동안은 투자 금액의 20프로만 매수한 뒤,

나머지 자금을 2~3개월 마다 위 과정을 반복해 예정 투자금의 100%를 사용해 매수합니다.

매수를 한 뒤 1년 동안 홀딩하고 되팔고, 

위의 과정을 반복합니다.

위의 절대 모멘텀 전략보다는 약간은 복잡하지만, (넘기기)

그래도 데이터 분석 코드를 보면, 공부와는 담을 쌓은 미국인도 쉽게 마법 공식을 구현할 수 있을 것 같습니다.(넘기기)

10.과정과 결과 코드를 한번 볼까요?

먼저 financedatareader라는 라이브러리를 이용해 한국 거래소에 상장된 전체 종목 리스트를 불러옵니다.(넘기기)

그런 다음 종목별 주요 지표를 찾은 다음, 종목들을 찾습니다. 코스피 코스닥 구분하지 않습니다.(넘기기)

그런 다음, per와 roa 지표를 가지고 마법 공식을 구현합니다.(넘기기)

자, 다음 코드는 결과입니다.
2022년에 수익이 가장 많이 난 국내 주식의 리스트입니다. 

이런 식으로 한 해를 대표하는 우량기업을 선별할 수 있습니다.
(넘기기)



11.자, 이런 마법공식을 바탕으로 

rnn모델을 활용해 보도록 하겠습니다.

참고로, 저희는 마법 공식을 어느 정도 따르되, 

누구나 아는 회사를 선별했습니다.

즉, 누구나 아는 회사들 중 마법 공식에 알맞는 회사들로 프로젝트를 진행했습니다.(넘기기)

12.rnn은 순차 데이터나 시계열 데이터 인공 신경망 유형입니다. 

저희는 rnn의 알고리즘 중 하나인  lstm을 이용했는데, 

lstm은 rnn의 그래디언트 소실 문제를 해결하기 위해

고안된 모델입니다.

특히, 수업에서도 다뤘다시피 주가 예측 측면에서도 

많이 이용되어서 사용하게 되었습니다.(넘기기)

13.코드를 자세히 보시죠.

먼저 데이터를 로드했는데, 

이 때, 주식 파일은 intel,google, apple 등의 파일을 번걸아가면서 load 했습니다.

다른 파일들은 이를 분석할 지표들이 있는 파일들입니다.(넘기기)

그런 다음, 데이터를 가공하고 결합하는데,

talib이라는 라이브러리를 통해 기술 지표를 쉽게 만들 수 있었습니다.(넘기기)

여러가지 과정을 거친 뒤, 이런 식으로 기간을 정합니다.(넘기기)

그런 다음, 정규화 함수를 만들었는데,

저희는 MinMaxScaler을 사용했습니다.

이는 데이터를 원하는 범위로 바꿔주는 함수입니다.

보통 0부터 1까지로 많이 바꿉니다.(넘기기)

그런 다음, lstm 모델을 생성합니다.

총 5개의 lstm 층과 200개의 뉴런을 사용해 모델링 했습니다.

사이사이에 dropout,BatchNormalization을 넣어 과적합을 방지하고 정규화를 진행했습니다.(넘기기)

그런 다음 모델을 학습합니다.(넘기기)


14.결과분석

결과를 쉽게 보기 위해 roc auc 커브를 만들었습니다. 이 코드는 책을 참고했으며, 

간단히 말해서 이 커브의 넓이값이 클 수록 성능이 좋은 것입니다.


이렇게 결과를 본 다음, (넘기기)

buy and hold 전략(백테스팅)과 lstm을 통해 시그널을 파악했을 때의 차이를 그래프로 봅니다.

파란색이 LSTM, 주황핵이 BUY AND HOLD 전략입니다.
(넘기기)

결과는 대략적으로 다음과 같습니다.(세개의 회사의 그래프)

그냥 buy and hold를 한 것보다 결과적으로 더 많은 이익을 볼 수 있다는 점을 알 수 있습니다.

그래프를 보면 lstm은 상승장일 때 많이 올라가지는 많지만 하락장에서 많이 잃지 않아서 결과적으로 이득을 보는 것을 알 수 있습니다.(넘기기)

15.모델 개선

문제는, roc 그래프의 값이 50 전후로 왔다갔다 했었다는 것입니다. 물론 책에서는 이 지표정도가 정상이라고 서술이 되어있었습니다만,

저희는 이를 개선해보고자 에폭 값이나 배치 사이즈를 조정해 보았으나 효과가 없었습니다.

그래서 lstm의 층을 늘리거나, 데이터의 양을 늘려 보았습니다.

lstm의 층을 7개로 늘렸을 때는 이렇게 조금은 나은 결과를 보였습니다. 하지만

9개로 늘렸을 때는, 이렇게 더 나쁜 결과를 냈습니다.

이는, 층의 과도하게 많아져서, 과적합 문제를 해결한 것을 넘어서 역효과를 냈기 때문인 것 같습니다.

그래서, 층을 5개로 유지한 채 데이터의 길이를 2배로 늘렸습니다. train,test,vaild의 기간을 모두 2배로 늘렸습니다.

그랬더니 결과는 이렇게 나타났습니다.

결과가 약간 좋아졌지만, 데이터의 격차가 큰 편이여서 

프로젝트 이후에도 성능을 개선하는 노력이 필요한 것 같습니다.(넘기기)

16.인사이트

자, 이제 인사이트입니다.

비록 모델이 완벽하지는 않지만, 우리는 lstm이 수익을 볼 때는 수익을 덜 보게 할 수는 있어도 하락장에서 보는 손해의 비율을 현저히 낮춰준다는 것을 볼 수 있습니다. 이를 통해, 결과적으로 보는 수익률을 높혀줍니다.  그리고 이는 저희가 잘 아는 큰 회사들에게도 적용이 됩니다.

이를 통해, 마법 공식과 lstm을 통해 투자를 하는 것은 괜찮은 전략이 될 수 있다는 점을 알 수 있습니다.

허나 모델 성능을 향상시키기 위한 노력은 계속 되어야겠습니다.(넘기기)



물론 이 미국인은 그것도 안하고 빠르게 수익을 얻고 싶어하지만... (넘기기)

글쎄요. 이 할아버지가 다시 한번 나와야겠네요.(넘기기)


17.결론

우리는 2가지 전략을 통해서 이 미국인이 성공적으로 주식 투자를 할 수 있다는 것을 알 수 있습니다.

물론 말씀드렸다시피 인내심이 중요하긴 하겠지만,(넘기기) 

미국에 대한 애국심이 투철한 이 미국인은 미국과 미국 시장에 대한 믿음으로 주식 시장에서 이길 것을 믿어 의심치 않을 것입니다.(넘기기)


저희도 비록 국적은 다르지만 

앞서 이야기했던 전략을 잘 활용한다면 주식  시장에서 이익을 얻을 수 있지 않을까 생각이 듭니다.(넘기기)

네, 지금까지 놈놈놈의 발표자 이장한이었습니다. 감사합니다!


